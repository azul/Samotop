
pub session -> Vec<SmtpInput>
	= WS* i:script
	{ i } 

pub script -> Vec<SmtpInput>
	= input +

pub input -> SmtpInput
	= inp_none / inp_command / inp_incomplete
pub inp_command -> SmtpInput
	= b:#position c:command e:#position
	{ SmtpInput::Command(b, e - b, c) }
pub inp_none -> SmtpInput
	= b:#position s:$(NL / WS* NL) e:#position
	{ SmtpInput::None(b, e - b, s.to_string()) }
pub inp_incomplete -> SmtpInput
	= b:#position s:$( [^\r\n]+ ) e:#position
	{ SmtpInput::Incomplete(b, e - b, s.to_string()) }

pub command -> SmtpCommand
	= cmd_helo /
	  cmd_ehlo /
	  cmd_mail /
	  cmd_send /
	  cmd_soml /
	  cmd_saml /
	  cmd_rcpt /
	  cmd_data /
	  cmd_rset /
	  cmd_quit /
          cmd_noop /
	  cmd_turn /
	  cmd_vrfy /
	  cmd_expn /
	  cmd_help /
	  cmd_unknown

pub cmd_unknown -> SmtpCommand
	= s:$( [^\r\n]+ NL )
	{ SmtpCommand::Unknown(s.to_string()) }

pub cmd_quit -> SmtpCommand
	= "quit"i NL
	{ SmtpCommand::Quit }

pub cmd_rset -> SmtpCommand
        = "rset"i NL
        { SmtpCommand::Rset }

pub cmd_data -> SmtpCommand
        = "data"i NL
        { SmtpCommand::Data }

pub cmd_turn -> SmtpCommand
        = "turn"i NL
        { SmtpCommand::Turn }

pub cmd_mail -> SmtpCommand
	= "mail from:"i p:path_reverse NL
	{ SmtpCommand::Mail(SmtpDelivery::Mail, p) }
pub cmd_send -> SmtpCommand
        = "send from:"i p:path_reverse NL
        { SmtpCommand::Mail(SmtpDelivery::Send, p) }
pub cmd_soml -> SmtpCommand
        = "soml from:"i p:path_reverse NL
        { SmtpCommand::Mail(SmtpDelivery::Soml, p) }
pub cmd_saml -> SmtpCommand
        = "saml from:"i p:path_reverse NL
        { SmtpCommand::Mail(SmtpDelivery::Saml, p) }

pub cmd_rcpt -> SmtpCommand
        = "rcpt to:"i p:path_forward NL
        { SmtpCommand::Rcpt(p) }

pub cmd_helo -> SmtpCommand
	= "helo"i SP h:host NL
	{ SmtpCommand::Helo(h) }

pub cmd_ehlo -> SmtpCommand
	= "ehlo"i SP h:host NL
	{ SmtpCommand::Ehlo(h) }

pub cmd_vrfy -> SmtpCommand
        = "vrfy"i s:strparam NL
        { SmtpCommand::Vrfy(s) }

pub cmd_expn -> SmtpCommand
        = "expn"i s:strparam NL
        { SmtpCommand::Expn(s) }

pub cmd_noop -> SmtpCommand
        = "noop"i s:strparam* NL
        { SmtpCommand::Noop(s) }

pub cmd_help -> SmtpCommand
        = "help"i s:strparam* NL
        { SmtpCommand::Help(s) }

pub path_forward -> SmtpPath
	= path_relay / path_direct / path_postmaster
pub path_reverse -> SmtpPath
	= path_relay / path_direct / path_null

path_relay -> SmtpPath
	= "<" h:athost+ a:address ">"
	{ SmtpPath::Relay(h, a) }

path_direct -> SmtpPath
	= "<" a:address ">"
	{ SmtpPath::Direct(a) }

path_postmaster -> SmtpPath
        = "<postmaster>"i
        { SmtpPath::Postmaster }

path_null -> SmtpPath
        = "<>"
        { SmtpPath::Null }

pub address -> SmtpAddress
	= s:str "@" h:host
	{ SmtpAddress::Mailbox (s, h) }

athost -> SmtpHost
	= "@" h:host (&",@" "," / ":")
	{ h }

strparam -> String
        = SP s:str
        { s }

pub host -> SmtpHost
	= host_numeric /
	  host_ipv4 /
	  host_ipv6 /
	  host_other /
          host_domain

host_domain -> SmtpHost
	= s:$( label ("." label)* )
	{ SmtpHost::Domain(s.to_string()) }
domain = #quiet<label ("." label)*> / #expected("domain name")
label = [a-zA-Z0-9] [-a-zA-Z0-9]*

host_numeric -> SmtpHost
	= "#" s:$([0-9]+ / #expected("ipv4 number"))
	{ match u32::from_str(s) {
		Ok(ip) => SmtpHost::Ipv4(Ipv4Addr::from(ip)),
		Err(e) => SmtpHost::Invalid{label:"numeric".to_string(), literal:s.to_string()},
	} }

host_ipv4 -> SmtpHost
	= "[" s:$(ipv4addr) "]"
	{ match Ipv4Addr::from_str(s) {
		Ok(ip) => SmtpHost::Ipv4(ip),
		Err(e) => SmtpHost::Invalid{label:"ipv4".to_string(), literal:s.to_string()},
	} }
ipv4addr = #quiet<ipv4part "." ipv4part "." ipv4part "." ipv4part> / #expected("ipv4 address")
ipv4part = "25" [0-5] / "2" [0-4] [0-9] / [0-1] [0-9] [0-9]? / [0-9] [0-9]?

host_ipv6 -> SmtpHost
	= l:$("IPv6"i) ":" s:$(ipv6addr)
	{ match Ipv6Addr::from_str(s) {
		Ok(ip) => SmtpHost::Ipv6(ip),
		Err(e) => SmtpHost::Invalid{label:l.to_string(), literal:s.to_string()},
        } }
ipv6addr = #quiet<[0-9a-fA-F:.]+> / #expected("ipv6 address")

host_other -> SmtpHost
        = l:str ":" s:str
        { SmtpHost::Other{label:l, literal:s} }

pub str -> String
        = str_quoted / str_plain
str_plain -> String
	= v:char*
	{ v.iter().fold(String::new(), |s, c| s + c) }
str_quoted -> String
	= ["] v:qchar* ["]
	{ v.iter().fold(String::new(), |s, c| s + c) }
qchar -> &'input str
	= qchar_regular / char_special
qchar_regular  -> &'input str
	= s:$(#quiet<!(["\\] / "\r" / "\n") .> / #expected("quoted character"))
	{ s }
char  -> &'input str
	= char_regular / char_special
char_regular -> &'input str
	= s:$(#quiet<[-!#$%&'*+`/0-1a-z-A-Z=?~^_{}|]> / #expected("regular character"))
	{ s }
char_special -> &'input str
	= "\\" s:$(#quiet<.> / #expected("special character"))
	{ s }
NL	= #quiet<"\r\n"> / #expected("{NL}")
SP	= #quiet<" "> / #expected("{SP}")
WS	= #quiet<SP / "\t"> / #expected("{WS}")
